 /*FIRST REVERSE
 Have the function FirstReverse(str) take the str parameter being passed and return the string in reversed order. 

There exist several built-in functions in almost all languages that reverse a string for you very easily, 
so we'll cover how to first reverse a string manually and then we'll show you how to do it using built-in functions.

A simple way to reverse a string would be to create a new string and fill it with the characters from the original
string, but backwards. To do this, we need to loop through the original string starting from the end, and every 
iteration of the loop we move to the previous character in the string. Here is an example:*/


function FirstReverse(str) { 

  var newString = "";

  for (var i = str.length - 1; i >= 0; i--) {    
    // add each character to newString
    newString = newString + str.charAt(i);
  }

  return newString;
         
}
   
FirstReverse("I am a string that needs to be reversed");  

Below is code that shows how to achieve this using built-in string and array functions.

function FirstReverse(str) { 

  // first we split the string which creates an array of characters, e.g. ['c','a','t']
  // then we call the reverse function on this array 
  // and finally we turn the reversed array back into a string using the join function
  return str.split('').reverse().join('');
         
}
   
FirstReverse("I am a string that needs to be reversed");   






----------------------------------FIRST FACTORIAL
Using the JavaScript language, have the function FirstFactorial(num) take the num parameter being passed
and return the factorial of it (ie. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be 
between 1 and 18.

In the code below, we create a new variable called factorial which we will use to store our temporary values 
as we loop. In our loop, we start at 1 and increment until we reach our variable num.

function FirstFactorial(num) { 

  var factorial = 1;

  for (var i = 1; i <= num; i++) {  
    // multiply each number between 1 and num  
    // factorial = 1 * 1 = 1
    // factorial = 1 * 2 = 2
    // factorial = 2 * 3 = 6
    // factorial = 6 * 4 = 24
    // ...
    factorial = factorial * i;
  }

  return factorial;
         
}
   
FirstFactorial(4);    


It is also possible to create a recursive function to calculate the factorial.

function FirstFactorial(num) { 

  // our factorial function
  function factorial(n) { 
 
    // terminate the recursion once we hit zero
    if (n===0) { return 1; }

    // otherwise keep calling the function recursively 
    else { return factorial(n-1) * n; }

  }

  return factorial(num);
         
}
   
FirstFactorial(4);                         

While the above recursive implementation is correct, it may run slowly if you try to calculate the factorial
of a very large number. One solution to this is memoization. Memoization is a technique used in programming 
where you store values that take a long time to calculate in a list, which you can then retrieve values from 
easily later on.





--------------------------------- LONGEST WORD
Description: For this challenge you will be determining the largest word in a string. have the function 
LongestWord(sen) take the sen parameter being passed and return the largest word in the string.
If there are two or more words that are the same length, return the first word from the string with that length.
Ignore punctuation and assume sen will not be empty. 

1. Strip away any punctuation because the challenge tells us to ignore these symbols,
   so the string "hello$%()" is actually just "hello".
2. Separate the sentence into a list of words in order to easily retrieve words and their respective lengths.
3. Then loop through this list and compare the words to find the one with the longest length.

We will be using regular expression functions in order to strip away punctuation and turn the string
into a list of words. Regular expressions are patterns we define for the program to find in some text.

function LongestWord(sen) { 

  // we use the regex match function which searches the string for the
  // pattern and returns an array of strings it finds
  // in our case the pattern we define below returns words with
  // only the characters a through z and 0 through 9, stripping away punctuation
  // e.g. "hello$% ##all" becomes [hello, all]
  var arr = sen.match(/[a-z0-9]+/gi);

  // the array sort function takes a function as a parameter
  // which is used to compare each element in the array to the
  // next element in the array
  var sorted = arr.sort(function(a, b) {
    return b.length - a.length;
  });

  // this array now contains all the words in the original
  // string but in order from longest to shortest length
  // so we simply return the first element
  return sorted[0];
         
}
   
LongestWord("the $$$longest# word is coderbyte");           






------------------------------------------ LETTER CHANGES
For this challenge you will be manipulating characters in a string based off their positions in the alphabet.

Using the JavaScript language, have the function LetterChanges(str) take the str parameter being passed and 
modify it using the following algorithm. Replace every letter in the string with the letter following it
in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) 
and finally return this modified string. 

We will be changing the letters by using their respective ASCII values and adding 1 to them in order to get
the next letter in the alphabet. ASCII values are just numbers that are assigned to each character in a sequential
order, for example, the ASCII code for the letter a is 97 and b is 98. What we'll do 
is convert a letter to its ASCII number, add 1 to it, then convert this new number back into a character using
a built-in character function.

function LetterChanges(str) { 

  // we will replace every letter in the string with the letter following it
  // by first getting the charCode number of the letter, adding 1 to it, then 
  // converting this new charCode number to a letter using the fromCharCode function
  // we also check to see if the character is z and if so we simply convert the z to an a
  var converted = str.replace(/[a-z]/gi, function(char) { 
    return (char === 'z' || char === 'Z') ? 'a' : String.fromCharCode(char.charCodeAt() + 1);
  });

  // we have now successfully converted each letter to the letter following it
  // in the alphabet, and all we need to do now is capitalize the vowels
  var capitalized = converted.replace(/a|e|i|o|u/gi, function(vowel) { 
    return vowel.toUpperCase();
  });

  // return the final string
  return capitalized;
         
}
   
LetterChanges("fun times!"); 








--------------------------------------- SIMPLE ADDING
Description: For this challenge you will be adding up all the numbers from 1 to a certain argument.
have the function SimpleAdding(num) add up all the numbers from 1 to num.

This challenge requires you to add up all the numbers from 1 to a given argument. For example, if the parameter num
is 4, your program should add up 1 + 2 + 3 + 4 and return 10. This will be pretty simple to write out as a loop.
We'll maintain a variable and keep adding to it as we loop from 1 to num.

function SimpleAdding(num) { 

  var answer = 0;

  // loop from 1 to num
  for (var i = 1; i <= num; i++) {
    answer = answer + i;
  } 

  return answer;
         
}

SimpleAdding(4);







------------------------------------- LETTER CAPITALIZE
Description: For this challenge you will be capitalizing certain characters in a string.
have the function LetterCapitalize(str) take the str parameter being passed and capitalize 
the first letter of each word. Words will be separated by only one space. 

This challenge requires you to capitalize the first letter of each word.To do this, 
we'll create an array of words, then loop through each word and capitalize the first letter, and then combine
these words back into one string. Below is some simple code to accomplish this:

function LetterCapitalize(str) { 
  
  // split the string into an array
  var words = str.split(' ');

  // we split the word into two parts and then combine the parts 
  // the first part is the first letter which we capitalize and the 
  // second part is the rest of the string
  for (var i = 0; i < words.length; i++) {
    words[i] = words[i].substring(0,1).toUpperCase() + words[i].substring(1);
  }

  // return the array of words joined into a string
  return words.join(" ");
         
}
   
console.log(LetterCapitalize("hello world from coderbyte")); 

There is also another way to solve this challenge by using regular expressions and matching each word in the string
and changing the first letter



