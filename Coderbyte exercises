 /*FIRST REVERSE
 Have the function FirstReverse(str) take the str parameter being passed and return the string in reversed order. 

There exist several built-in functions in almost all languages that reverse a string for you very easily, 
so we'll cover how to first reverse a string manually and then we'll show you how to do it using built-in functions.

A simple way to reverse a string would be to create a new string and fill it with the characters from the original
string, but backwards. To do this, we need to loop through the original string starting from the end, and every 
iteration of the loop we move to the previous character in the string. Here is an example:*/


function FirstReverse(str) { 

  var newString = "";

  for (var i = str.length - 1; i >= 0; i--) {    
    // add each character to newString
    newString = newString + str.charAt(i);
  }

  return newString;
         
}
   
FirstReverse("I am a string that needs to be reversed");  

Below is code that shows how to achieve this using built-in string and array functions.

function FirstReverse(str) { 

  // first we split the string which creates an array of characters, e.g. ['c','a','t']
  // then we call the reverse function on this array 
  // and finally we turn the reversed array back into a string using the join function
  return str.split('').reverse().join('');
         
}
   
FirstReverse("I am a string that needs to be reversed");   






----------------------------------FIRST FACTORIAL
Using the JavaScript language, have the function FirstFactorial(num) take the num parameter being passed
and return the factorial of it (ie. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be 
between 1 and 18.

In the code below, we create a new variable called factorial which we will use to store our temporary values 
as we loop. In our loop, we start at 1 and increment until we reach our variable num.

function FirstFactorial(num) { 

  var factorial = 1;

  for (var i = 1; i <= num; i++) {  
    // multiply each number between 1 and num  
    // factorial = 1 * 1 = 1
    // factorial = 1 * 2 = 2
    // factorial = 2 * 3 = 6
    // factorial = 6 * 4 = 24
    // ...
    factorial = factorial * i;
  }

  return factorial;
         
}
   
FirstFactorial(4);    


It is also possible to create a recursive function to calculate the factorial.

function FirstFactorial(num) { 

  // our factorial function
  function factorial(n) { 
 
    // terminate the recursion once we hit zero
    if (n===0) { return 1; }

    // otherwise keep calling the function recursively 
    else { return factorial(n-1) * n; }

  }

  return factorial(num);
         
}
   
FirstFactorial(4);                         

While the above recursive implementation is correct, it may run slowly if you try to calculate the factorial
of a very large number. One solution to this is memoization. Memoization is a technique used in programming 
where you store values that take a long time to calculate in a list, which you can then retrieve values from 
easily later on.





--------------------------------- LONGEST WORD
Description: For this challenge you will be determining the largest word in a string. have the function 
LongestWord(sen) take the sen parameter being passed and return the largest word in the string.
If there are two or more words that are the same length, return the first word from the string with that length.
Ignore punctuation and assume sen will not be empty. 

1. Strip away any punctuation because the challenge tells us to ignore these symbols,
   so the string "hello$%()" is actually just "hello".
2. Separate the sentence into a list of words in order to easily retrieve words and their respective lengths.
3. Then loop through this list and compare the words to find the one with the longest length.

We will be using regular expression functions in order to strip away punctuation and turn the string
into a list of words. Regular expressions are patterns we define for the program to find in some text.

function LongestWord(sen) { 

  // we use the regex match function which searches the string for the
  // pattern and returns an array of strings it finds
  // in our case the pattern we define below returns words with
  // only the characters a through z and 0 through 9, stripping away punctuation
  // e.g. "hello$% ##all" becomes [hello, all]
  var arr = sen.match(/[a-z0-9]+/gi);

  // the array sort function takes a function as a parameter
  // which is used to compare each element in the array to the
  // next element in the array
  var sorted = arr.sort(function(a, b) {
    return b.length - a.length;
  });

  // this array now contains all the words in the original
  // string but in order from longest to shortest length
  // so we simply return the first element
  return sorted[0];
         
}
   
LongestWord("the $$$longest# word is coderbyte");           






------------------------------------------ LETTER CHANGES
For this challenge you will be manipulating characters in a string based off their positions in the alphabet.

Using the JavaScript language, have the function LetterChanges(str) take the str parameter being passed and 
modify it using the following algorithm. Replace every letter in the string with the letter following it
in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) 
and finally return this modified string. 

We will be changing the letters by using their respective ASCII values and adding 1 to them in order to get
the next letter in the alphabet. ASCII values are just numbers that are assigned to each character in a sequential
order, for example, the ASCII code for the letter a is 97 and b is 98. What we'll do 
is convert a letter to its ASCII number, add 1 to it, then convert this new number back into a character using
a built-in character function.

function LetterChanges(str) { 

  // we will replace every letter in the string with the letter following it
  // by first getting the charCode number of the letter, adding 1 to it, then 
  // converting this new charCode number to a letter using the fromCharCode function
  // we also check to see if the character is z and if so we simply convert the z to an a
  var converted = str.replace(/[a-z]/gi, function(char) { 
    return (char === 'z' || char === 'Z') ? 'a' : String.fromCharCode(char.charCodeAt() + 1);
  });

  // we have now successfully converted each letter to the letter following it
  // in the alphabet, and all we need to do now is capitalize the vowels
  var capitalized = converted.replace(/a|e|i|o|u/gi, function(vowel) { 
    return vowel.toUpperCase();
  });

  // return the final string
  return capitalized;
         
}
   
LetterChanges("fun times!"); 








--------------------------------------- SIMPLE ADDING
Description: For this challenge you will be adding up all the numbers from 1 to a certain argument.
have the function SimpleAdding(num) add up all the numbers from 1 to num.

This challenge requires you to add up all the numbers from 1 to a given argument. For example, if the parameter num
is 4, your program should add up 1 + 2 + 3 + 4 and return 10. This will be pretty simple to write out as a loop.
We'll maintain a variable and keep adding to it as we loop from 1 to num.

function SimpleAdding(num) { 

  var answer = 0;

  // loop from 1 to num
  for (var i = 1; i <= num; i++) {
    answer = answer + i;
  } 

  return answer;
         
}

SimpleAdding(4);







------------------------------------- LETTER CAPITALIZE
Description: For this challenge you will be capitalizing certain characters in a string.
have the function LetterCapitalize(str) take the str parameter being passed and capitalize 
the first letter of each word. Words will be separated by only one space. 

This challenge requires you to capitalize the first letter of each word.To do this, 
we'll create an array of words, then loop through each word and capitalize the first letter, and then combine
these words back into one string. Below is some simple code to accomplish this:

function LetterCapitalize(str) { 
  
  // split the string into an array
  var words = str.split(' ');

  // we split the word into two parts and then combine the parts 
  // the first part is the first letter which we capitalize and the 
  // second part is the rest of the string
  for (var i = 0; i < words.length; i++) {
    words[i] = words[i].substring(0,1).toUpperCase() + words[i].substring(1);
  }

  // return the array of words joined into a string
  return words.join(" ");
         
}
   
console.log(LetterCapitalize("hello world from coderbyte")); 

There is also another way to solve this challenge by using regular expressions and matching each word in the string
and changing the first letter.

function LetterCapitalize(str) { 
  
  // our regex [a-z] matches every alphabetic character in the string
  // but the \b before it specifies a word boundary, in other words, nothing can 
  // come before those letters therefore selecting every word in the string
  return str.replace(/\b[a-z]/gi, function(char) { 
    return char.toUpperCase();
  });
         
}
   
LetterCapitalize("hello world from coderbyte");






------------------------------- CKECK NUMS
Description: For this challenge you will be comparing two numbers and determining which one is greater.

This challenge requires you to return the string "true" if the second integer parameter (num2) is larger than
the first (num1). 

function CheckNums(num1, num2) { 

  // we use a ternary expression to write as little code as possible
  return (num2 === num1) ? '-1' : (num2 > num1) ? true : false;
         
}
   
CheckNums(3, 122);                            







--------------------------------TIME CONVERT
Description: For this challenge you will be determining the difference in hours and minutes between two given times.

have the function TimeConvert(num) take the num parameter being passed and return the number of hours and minutes
the parameter converts to (ie. if num = 63 then the output should be 1:3). Separate the number of hours and minutes
with a colon. 

This challenge requires you to convert an integer, which represents the number of minutes, 
for example 63 means 214 minutes, and convert this integer into hours and minutes. So if the input was 63,
then your program should output the string '1:3' because 63 minutes converts to 1 hour and 3 minutes.

We will use the modulo operation to solve this challenge. The modulo operation simply returns the remainder
after a division, so for example, the remainder of 5 / 2 is 1, so the modulo of 5 / 2 is 1.

function TimeConvert(num) { 

  // to get the hours, we divide num by 60 and round it down
  // e.g. 61 / 60 = 1 hour
  // e.g. 43 / 60 = 0 hours
  var hours = Math.floor(num / 60);

  // to get the minutes, now we use the remainder that we discarded above
  // the modulo operation is represented by the % symbol
  // e.g. 61 % 60 = 1 minute
  // e.g. 43 % 60 = 43 minutes
  var minutes = num % 60;

  // combine the hours and minutes
  return hours + ':' + minutes;
         
}
   
console.log(TimeConvert(124)); 







------------------------------------ ALPHABET SOUP
 have the function AlphabetSoup(str) take the str string parameter being passed and return the string with 
 the letters in alphabetical order (ie. hello becomes ehllo). Assume numbers and punctuation symbols will not be
 included in the string.
 
 function AlphabetSoup(str) { 

  // convert the string into an array of characters
  var chars = str.split("");

  // sort the array in alphabetical order
  var sorted = chars.sort();

  // return the newly sorted string
  return sorted.join("");
         
}
   
console.log(AlphabetSoup("coderbyte"));






-------------------------------------- AB CHECK
Description: For this challenge you will determine if two characters are separated a specific way in the string.

Using the JavaScript language, have the function ABCheck(str) take the str parameter being passed and return 
the string true if the characters a and b are separated by exactly 3 places anywhere in the string 
at least once (ie. "lane borrowed" would result in true because there is exactly three characters between a and b).
Otherwise return the string false. 

function ABCheck(str) { 

  // convert the whole string to lowercase letters
  var str = str.toLowerCase();

  // loop through the string
  for (var i = 0; i < str.length; i++) {
  
    // check for "a...b"
    if (str[i] === 'a' && str[i+4] === 'b') { return true; }

    // check for "b...a"
    if (str[i] === 'b' && str[i+4] === 'a') { return true; }

    // NOTE: in JavaScript we don't have to worry about out-of-bounds errors
    // because it just returns undefined and the program keeps running

  }

  // if none of above were encountered
  // then return false by default
  return false;
         
}
   
console.log(ABCheck("Laura sobs"));






------------------------------------- VOWEL COUNT
Description: For this challenge you will be counting all the vowels in a string.
have the function VowelCount(str) take the str string parameter being passed and return the number of vowels
the string contains (ie. "All cows eat grass" would return 5). Do not count y as a vowel for this challenge. 

function VowelCount(str) { 

  // convert the string to all lowercase characters
  var str = str.toLowerCase();

  // possible vowels
  var vowels = ['a', 'e', 'i', 'o', 'u'];

  // where we store our vowel count
  var count = 0;

  // loop through string checking each character
  for (var i = 0; i < str.length; i++) { 

    // if this character is found in vowels array
    // then the character is a vowel and we add 1 to count
    if (vowels.indexOf(str[i]) !== -1) {
      count = count + 1
    }

  }

  // return the number of vowels found
  return count;
         
}
   
VowelCount("All cows eat grass"); 








--------------------------------- WORD COUNT
Description: For this challenge you will be determining how many words a sentence contains.
have the function WordCount(str) take the str string parameter being passed and return the number of words
the string contains (ie. "Never eat shredded wheat" would return 4). Words will be separated by single spaces. 

This challenge requires you to return the number of words in a string. This is a very simple problem that
we can solve in one line by splitting the string up into an array. 


function WordCount(str) { 

  // we simply split the string into an array
  // with the separator being the spaces
  return str.split(" ").length;
         
}
WordCount("I am 4 words");








------------------------------------- EX OH
Description: For this challenge you will traverse a string and determine if there is an equal amount
of certain characters.
have the function ExOh(str) take the str parameter being passed and return the string true if there is
an equal number of x's and o's, otherwise return the string false. Only these two letters will be entered
in the string, no punctuation or numbers. For example: if str is "xooxxxxooxo" then the output should return false
because there are 6 x's and 5 o's. 

This challenge requires you to determine if the number of x's in the string is equal to the number of o's.
For example, if the string were "xoox" then your program should return the string true. There are several ways
to solve this challenge, but we'll cover the most basic way first.

function WordCount(str) { 

  // split the string into an array
  var arr = str.split("");

  // create a new array of x's by using the filter function
  // which takes a test function with 3 parameters:
  // the element, its index, and the array it came from
  // and if the test passes it adds this element to the new array
  var x = arr.filter(function(elem, index, self) { 
    return elem === 'x';
  });

  // because we know the string can only contains x's and o's
  // we can subtract the length of our new array of x's from 
  // arr and that will leave us with the number of o's
  var o = arr.length - x.length;

  // see if their lengths are equal
  return x.length === o;
         
}
   
console.log(WordCount("xooox")); 



