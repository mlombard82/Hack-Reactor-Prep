Description: For this challenge you will determine the second lowest and greatest numbers in an array.

have the function SecondGreatLow(arr) take the array of numbers stored in arr and return the second lowest
and second greatest numbers, respectively, separated by a space. For example: if arr contains [7, 7, 12, 98, 106] 
the output should be 12 98. The array will not be empty and will contain at least 2 numbers. 
It can get tricky if there's just two numbers! 

This challenge requires you to return the second smallest and second largest numbers from an array.
To solve this we'll sort the array and then determine the elements we need to return.

1. CODERBYTE SOLUTION
function SecondGreatLow(arr) { 

  // first we create a unique array by using the filter function
  // we check to see if the index of the current element in the array 
  // is equal to the first index of the element, if so then add the
  // element to the new array
  var unique = arr.filter(function(elem, index, self) {
    return self.indexOf(elem) === index;
  });

  // sort the unique array in ascending order
  var sorted = unique.sort(function(a, b) {
    return a - b;
  });

  // return the second smallest and largest elements
  // but also check to make sure there is more than 1
  // element in the array
  if (sorted.length < 2) { 
    return sorted[0] + " " + sorted[0]; 
  } else {
    return sorted[1] + " " + sorted[sorted.length - 2];
  }
         
}
   
console.log(SecondGreatLow([2, 10, 5, 1, -12, 140])); 



2. 
function SecondGreatLow(arr) {
  var arrSorted = arr.sort(function(a, b) {
    return a < b ? -1 : 1
      });
  if (arrSorted.length > 3) {
    return arrSorted[1] + " " + arrSorted[arrSorted.length - 2];
  } else {
    return arrSorted[0] + " " + arrSorted[1];
  }
}

console.log(SecondGreatLow([2, 10, 5, 1, -12, 140])); 






3.
function SecondGreatLow(arr) {

    // Use the sort function and pass in a callback to sort from smallest to largest
    // If you haven't encountered function expressions/callbacks before, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort gives a good explanation of how this method works.
    arr = arr.sort(function(a, b) {return a - b;});

    // Loop through each item in the array and check if the adjacent array item is the same.
    for (var i = arr.length - 1; i > 0; i--) {
        if (arr[i] == arr[i - 1]) {
            // If it is, we use the .splice method to remove it.
            arr.splice(i, 1);
        }
    }

    if (arr.length > 2) {
        // If our array is longer than two items, we return the 2nd and 2nd to last item in the array.
        return arr[1] + " " + arr[arr.length - 2];
    } else if (arr.length == 2) {
        // If our array is exactly two items long, we return the 2nd and the first item
        return arr[1] + " " + arr[0];
    } else {
        // If our array is only one item, we return the only element twice.
        return arr[0] + " " + arr[0];
    }

}

console.log(SecondGreatLow([2, 10, 5, 1, -12, 140]));






4. 
function SecondGreatLow(arr) { 
  var unique = [arr[0]];
  for(var i = 1; i < arr.length; i++) {
    if (unique.indexOf(arr[i]) == -1) {
      unique.push(arr[i]);
    }
  }
  unique.sort(function(a,b){return a - b});
  var smallest = unique[1].toString();
  unique.reverse();
  var largest = unique[1].toString();
  // code goes here  
  return smallest + " " + largest; 
         
}

console.log(SecondGreatLow([2, 10, 5, 1, -12, 140])); 
