Revisit: 
functions: looping 2:37
look again and understand Closure recipes 5:22




Objects

var box = [];
box.material = 'cardboard';
var key = 'material';

console.log(box.key);    //undefined
console.log(box[key]);   //'cardboard'

....................
Storing Data
when we store a function as a property in an object, we call it a method.

var box = {};

box["material"] = "cardboard";

box["size"] = {
  "height": 2,
  "width" : 80
};

box.area = function(){
  return box.size.height* box.size.width;
};

* object literal notation in contrast to adding properties dynamically.

.......................
Native properties

var box = [];

box['0'] = 'meow';
box[3] = {'babyBox': true};

box[box.length - 1];     // here the length of the array is 4.
Object {babyBox: true}

........................
terms:
object literal notation
array literal notation

........................

explicitly returning a value versus having a side effect

.......................
A constructor, at its core, is a function that returns an object. to let other programmers know we mean a constructor,
we give name to the function with the first letter en mayuscula!

function AnimalMaker (name) {
  return {
    speak: function () {
      console.log("my name is ", name);
    }
  };
}

var myAnimal = AnimalMaker("Cheetah");

myAnimal.speak();        // "my name is Cheetah"

........................
the Arguments keyword

........................
Constructors

Bianca introduces the concept of using a function as a constructor. A constructor is a function that returns an object.
This object is a data model which contains the properties and methods for that object. In the name of the function we
use Capital letter to signal it is a constructor.

function AnimalMaker (name) {
  return {
    speak: function () {
      console.log("my name is ", name);
    }
  };
}

var myAnimal = AnimalMaker("Cheetah");

myAnimal.speak            

// function () {
      console.log("my name is ", name);
    }
    
    
myAnimal.speak()                 // dot notation: my name is  Cheetah

myAnimal['speak']()              // bracket notation: my name is  Cheetah





//to make a farm of animal objects borrowing from AnimalMaker

function AnimalMaker(name) {
  return {
    speak: function () {
      console.log("my name is ", name);
    }
  };
}

var animalNames = ["sheep", "bird", "big lager"];

var farm = [];
for (var i = 0; i < animalNames.length; i++){
  var animal = AnimalMaker(animalNames[i]);
  farm.push(animal);
}

console.log(farm);

for (var i = 0; i < farm.length; i++){
  console.log(farm[i]["speak"]());
}



.............................
CLOSURE (building up to it)


1.
var closureAlert = function (){
  var x = "Help! I'm a variable stuck in a closure!";

  var alerter = function(){
    alert(x);
  };

  alerter();
};

closureAlert();             //"Help! I'm a variable stuck in a closure!"


2.
var closureAlert = function (){
  var x = "Help! I'm a variable stuck in a closure!";

  var alerter = function(){
    alert(x);
  };

setTimeout(alerter, 1000);

  console.log("will still run right after");
};

closureAlert();





with setTimeOut, JavaScript is calling the function alerter later. With this next one, I am calling it later.

var closureAlert = function (){
  var x = 0;
  var alerter = function (){
    console.log(++x);
  };
  return alerter;
};

var funcStorer = closureAlert();
var funcStorer2 = closureAlert();
funcStorer();
funcStorer();
funcStorer();
funcStorer2();


what happens is, once we call closureAlert(); whatever the function returns, is what is actually being stored in 
the variable (var funcStorer = closureAlert();). ClosureAlert is being called once only and that is when it is being
assigned to the var funcStorer, because if calling funcStorer(); would mean calling ClosureAlert, then x would be reset
to zero (z= 0) every time.

And it is in that spirit that....

var add = function (num) {
  var num1 = num;

  var addToNum1 = function (num2){
    return num1 + num2;
  };

  return addToNum1;
}

var add5 = add(5);

add5(2);
7
add5(23);   // here every time you call the function it creates a new scope.
28


........................
Closure OBJECTS. In case you wanted to do different things, like reset, you are going to need different functions.
this is how you do that.

function counter () {
  var n = 0;
  return {
    count: function(){return ++n},
    reset: function(){n = 0}
  };
}

var myCounter = counter();

myCounter.count();
myCounter.count();
myCounter.count();
myCounter.count();
myCounter.count();





