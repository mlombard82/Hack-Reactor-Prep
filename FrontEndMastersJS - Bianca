Revisit: 
functions: looping 2.37- 2.51




Objects

var box = [];
box.material = 'cardboard';
var key = 'material';

console.log(box.key);    //undefined
console.log(box[key]);   //'cardboard'

....................
Storing Data
when we store a function as a property in an object, we call it a method.

var box = {};

box["material"] = "cardboard";

box["size"] = {
  "height": 2,
  "width" : 80
};

box.area = function(){
  return box.size.height* box.size.width;
};

* object literal notation in contrast to adding properties dynamically.

.......................
Native properties

var box = [];

box['0'] = 'meow';
box[3] = {'babyBox': true};

box[box.length - 1];     // here the length of the array is 4.
Object {babyBox: true}

........................
terms:
object literal notation
array literal notation

........................

explicitly returning a value versus having a side effect

.......................
A constructor, at its core, is a function that returns an object. to let other programmers know we mean a constructor,
we give name to the function with the first letter en mayuscula!

function AnimalMaker (name) {
  return {
    speak: function () {
      console.log("my name is ", name);
    }
  };
}

var myAnimal = AnimalMaker("Cheetah");

myAnimal.speak();        // "my name is Cheetah"

........................
the Arguments keyword

........................
Constructors

Bianca introduces the concept of using a function as a constructor. A constructor is a function that returns an object.
This object is a data model which contains the properties and methods for that object.




