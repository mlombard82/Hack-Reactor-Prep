
http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/

What is a Callback or Higher-order Function?

A callback function, also known as a higher-order function, is a function that is passed to another function (let’s call this other function “otherFunction”) as a parameter, and the callback function is called (or executed) inside the otherFunction. A callback function is essentially a pattern (an established solution to a common problem), and therefore, the use of a callback function is also known as a callback pattern.

Ruminate on this other classic example of callback functions in basic JavaScript:

var friends = ["Mike", "Stacy", "Andy", "Rick"];
​
friends.forEach(function (eachName, index){
console.log(index + 1 + ". " + eachName); // 1. Mike, 2. Stacy, 3. Andy, 4. Rick​
});


Again, note the way we pass an anonymous function (a function without a name) to the forEach method as a parameter.

...........................................

MAKE YOUR OWN CALLBACK FUNCTIONS 

It is rather easy to make your own callback functions. In the following example, I could have created one function to do all the work: retrieve the user data, create a generic poem with the data, and greet the user. This would have been a messy function with much if/else statements and, even still, it would have been very limited and incapable of carrying out other functionalities the application might need with the user data.

Instead, I left the implementation for added functionality up to the callback functions, so that the main function that retrieves the user data can perform virtually any task with the user data by simply passing the user’s full name and gender as parameters to the callback function and then executing the callback function.

In short, the getUserInput function is versatile: it can execute all sorts of callback functions with myriad of functionalities.

// First, setup the generic poem creator function; it will be the callback function in the getUserInput function below.

function genericPoemMaker (name, gender) {
  console.log(name + "is finer than fine wine");
  console.log("Altruistic and noble for the modern time.");
  console.log("Always admirably adorned with the latest style");
  console.log("A " + gender + " of unfortunate tragedies who still manages a perpetual smile");
}

//The callback, which is the last item in the parameter, will be our genericPoemMaker function we defined above.
function getUserInput(firstName, lastName, gender, callback){
  var fullName = firstName + " " + lastName;
  if (typeof callback === "function") {           // Make sure the callback is a function
  callback(fullName, gender);                     // Execute the callback function and pass the parameters to it
  }
}

getUserInput("Michael", "Fassbender", "Man", genericPoemMaker);  //Call the getUserInput function and pass the genericPoemMak                                                                  //  er function as a callback:


// Because the getUserInput function is only handling the retrieving of data, we can pass any callback to it. For example, we can pass a greetUser function like this:

function greetUser (customerName, sex) {
  var salutation = sex && sex === "Man"? "Mr." : "Ms.";
  console.log("Hello, " + salutation + " "  + customerName);
}

getUserInput("Bill", "Gates", "Man", greetUser);

//We called the same getUserInput function as we did before, but this time it performed a completely different task.
//As you see, callback functions afford much versatility.
