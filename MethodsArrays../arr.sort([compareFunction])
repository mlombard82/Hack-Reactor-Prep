Sorts the elements of an array in place and returns the array. the default sort order is according to
string Unicode.

arr.sort([compareFunction]). the parameter compareFunction is optional. if supplied, the array elements
are sorted according to the return value of the compare function.
it has the following form:
function compare(a, b) {
if(a is less than b by some ordering criterion){
return -1;
}
if(a is greater than b by some ordering criterion){
return 1;
}
return 0;
}
to compare numbers instead of strings, the compare function can simply substract b from a. the following will
sort the array ascending:
function compareNumbers(a, b){
return a - b;
}
the sort() method can be conveniently used with function expressions (and closures)*/
var numbers = [4, 2, 5, 1, 3];
numbers.sort(function(a, b){
return a - b;
});
console.log(numbers);
//[1, 2, 3, 4, 5]
Objects can be sorted given the value of one of their properties.
var items = [
{name:'Edward', value: 21},
{name:'Sharpe', value: 37},
{name:'And', value: 45},
{name:'The', value: -12},
{name:'Magnetic'},
{name:'Zeros', value: 37}
];
items.sort(function(a, b){
if(a.value > b.value){
return 1;
};
if(a.value < b.value){
return -1;
}
return 0;
};
/*Sorting with map.
The compareFunction can be invoked multiple times per element within the array. depending on the compareFunction's
nature, this may yield a large overhead. May be better to consider map for sorting. the idea is to walk the array
once to extract the actual values used for sorting into a temporary array, sort the temporary array and then walk
the temporary array to achieve the right order*/
var list = ['Delta', 'alpha', 'CHARLIE', 'bravo']; //the array to be sorted.
var mapped = list.map(function(el, i){ //temporary array holds objects with position and sort-value.
return{index: i, value: el.toLowerCase()};
});
mapped.sort(function(a, b){ //sorting the mapped array containing the reduced values.
return + (a.value > b.value) || + (a.value === b.value) -1;
});
var result = mapped.map(function(el){ //container for the resulting order.
return list[el.index];
});
