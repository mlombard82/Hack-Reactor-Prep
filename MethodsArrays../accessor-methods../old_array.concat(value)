returns a new flatten-into-one array comprised of the array on which it is called, joined with the array(s)/values
provided as arguments.

var new_array = old_array.concat(value)

creates a new array consisting of the elements in the object on which it is called, followed in order by,
for each argument, the elements of that argument(if the argument is an array) or the argument itself if not
an array.
Concatenating arrays/values will leave the originals untouched. Furthermore, any operation on the new array
will have no effect on the original array, and viceversa.

//concatenating 2 arrays
var alpha = ['a', 'b', 'c'];
numeric = [1, 2, 3];
var alphanumeric = alpha.concat(numeric);
console.log(alphanumeric );

//concatenating 3 arrays
var num1 = [1, 2, 3];
num2 = [4, 5, 6];
num3 = [7, 8, 9];
var nums = num1.concat(num2, num3);
console.log(nums);

//concatenating values to an array
var alpha = ['a', 'b', 'c'];
var alphaNumeric = alpha.concat(1, [2, 3]);
console.log(alphaNumeric);




-- (https://egghead.io/lessons/javascript-javascript-array-methods-in-depth-concat?series=javascript-arrays-in-depth#/tab-transcript)

Concat creates a shallow copy of an existing array that includes any arguments you pass to it. In this lesson, 
we look at using concat for adding additional values to an array then cover some more useful features such as accepting
other arrays as arguments & how to chain concat with other array methods such as forEach

var people = [
  {
    name: 'Shane'
  },
  {
    name:'Sally'
  }
];


var people2 = [
  {
    name: 'Simon'
  },
  {
    name:'Ben'
  }
];


people
  .concat(people2)
  .forEach(function(person){
      console.log(person.name);
});
